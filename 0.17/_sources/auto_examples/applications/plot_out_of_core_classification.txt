

.. _example_applications_plot_out_of_core_classification.py:


======================================================
Out-of-core classification of text documents
======================================================

This is an example showing how scikit-learn can be used for classification
using an out-of-core approach: learning from data that doesn't fit into main
memory. We make use of an online classifier, i.e., one that supports the
partial_fit method, that will be fed with batches of examples. To guarantee
that the features space remains the same over time we leverage a
HashingVectorizer that will project each example into the same feature space.
This is especially useful in the case of text classification where new
features (words) may appear in each batch.

The dataset used in this example is Reuters-21578 as provided by the UCI ML
repository. It will be automatically downloaded and uncompressed on first run.

The plot represents the learning curve of the classifier: the evolution
of classification accuracy over the course of the mini-batches. Accuracy is
measured on the first 1000 samples, held out as a validation set.

To limit the memory consumption, we queue examples up to a fixed amount before
feeding them to the learner.



.. rst-class:: horizontal


    *

      .. image:: images/plot_out_of_core_classification_001.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_002.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_003.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_004.png
            :scale: 47


**Script output**::

  Test set is 975 documents (114 positive)
            Perceptron classifier :          985 train docs (   132 positive)    975 test docs (   114 positive) accuracy: 0.919 in 1.07s (  916 docs/s)
        NB Multinomial classifier :          985 train docs (   132 positive)    975 test docs (   114 positive) accuracy: 0.884 in 1.09s (  899 docs/s)
    Passive-Aggressive classifier :          985 train docs (   132 positive)    975 test docs (   114 positive) accuracy: 0.924 in 1.10s (  897 docs/s)
                   SGD classifier :          985 train docs (   132 positive)    975 test docs (   114 positive) accuracy: 0.930 in 1.10s (  895 docs/s)
  
  
            Perceptron classifier :         3383 train docs (   396 positive)    975 test docs (   114 positive) accuracy: 0.938 in 2.78s ( 1218 docs/s)
        NB Multinomial classifier :         3383 train docs (   396 positive)    975 test docs (   114 positive) accuracy: 0.889 in 2.80s ( 1209 docs/s)
    Passive-Aggressive classifier :         3383 train docs (   396 positive)    975 test docs (   114 positive) accuracy: 0.959 in 2.80s ( 1208 docs/s)
                   SGD classifier :         3383 train docs (   396 positive)    975 test docs (   114 positive) accuracy: 0.956 in 2.80s ( 1207 docs/s)
  
  
            Perceptron classifier :         6203 train docs (   784 positive)    975 test docs (   114 positive) accuracy: 0.948 in 4.68s ( 1324 docs/s)
        NB Multinomial classifier :         6203 train docs (   784 positive)    975 test docs (   114 positive) accuracy: 0.914 in 4.70s ( 1318 docs/s)
    Passive-Aggressive classifier :         6203 train docs (   784 positive)    975 test docs (   114 positive) accuracy: 0.968 in 4.71s ( 1317 docs/s)
                   SGD classifier :         6203 train docs (   784 positive)    975 test docs (   114 positive) accuracy: 0.969 in 4.71s ( 1317 docs/s)
  
  
            Perceptron classifier :         9033 train docs (  1079 positive)    975 test docs (   114 positive) accuracy: 0.963 in 6.52s ( 1384 docs/s)
        NB Multinomial classifier :         9033 train docs (  1079 positive)    975 test docs (   114 positive) accuracy: 0.923 in 6.55s ( 1379 docs/s)
    Passive-Aggressive classifier :         9033 train docs (  1079 positive)    975 test docs (   114 positive) accuracy: 0.969 in 6.55s ( 1379 docs/s)
                   SGD classifier :         9033 train docs (  1079 positive)    975 test docs (   114 positive) accuracy: 0.965 in 6.55s ( 1378 docs/s)
  
  
            Perceptron classifier :        11951 train docs (  1440 positive)    975 test docs (   114 positive) accuracy: 0.962 in 8.38s ( 1426 docs/s)
        NB Multinomial classifier :        11951 train docs (  1440 positive)    975 test docs (   114 positive) accuracy: 0.935 in 8.40s ( 1423 docs/s)
    Passive-Aggressive classifier :        11951 train docs (  1440 positive)    975 test docs (   114 positive) accuracy: 0.973 in 8.40s ( 1422 docs/s)
                   SGD classifier :        11951 train docs (  1440 positive)    975 test docs (   114 positive) accuracy: 0.967 in 8.40s ( 1422 docs/s)
  
  
            Perceptron classifier :        14736 train docs (  1810 positive)    975 test docs (   114 positive) accuracy: 0.950 in 10.14s ( 1452 docs/s)
        NB Multinomial classifier :        14736 train docs (  1810 positive)    975 test docs (   114 positive) accuracy: 0.934 in 10.17s ( 1449 docs/s)
    Passive-Aggressive classifier :        14736 train docs (  1810 positive)    975 test docs (   114 positive) accuracy: 0.962 in 10.17s ( 1449 docs/s)
                   SGD classifier :        14736 train docs (  1810 positive)    975 test docs (   114 positive) accuracy: 0.964 in 10.17s ( 1448 docs/s)
  
  
            Perceptron classifier :        17179 train docs (  2101 positive)    975 test docs (   114 positive) accuracy: 0.959 in 11.89s ( 1444 docs/s)
        NB Multinomial classifier :        17179 train docs (  2101 positive)    975 test docs (   114 positive) accuracy: 0.936 in 11.91s ( 1442 docs/s)
    Passive-Aggressive classifier :        17179 train docs (  2101 positive)    975 test docs (   114 positive) accuracy: 0.966 in 11.91s ( 1442 docs/s)
                   SGD classifier :        17179 train docs (  2101 positive)    975 test docs (   114 positive) accuracy: 0.961 in 11.92s ( 1441 docs/s)



**Python source code:** :download:`plot_out_of_core_classification.py <plot_out_of_core_classification.py>`

.. literalinclude:: plot_out_of_core_classification.py
    :lines: 25-

**Total running time of the example:**  13.07 seconds
( 0 minutes  13.07 seconds)
    