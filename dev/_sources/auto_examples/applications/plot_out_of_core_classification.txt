

.. _example_applications_plot_out_of_core_classification.py:


======================================================
Out-of-core classification of text documents
======================================================

This is an example showing how scikit-learn can be used for classification
using an out-of-core approach: learning from data that doesn't fit into main
memory. We make use of an online classifier, i.e., one that supports the
partial_fit method, that will be fed with batches of examples. To guarantee
that the features space remains the same over time we leverage a
HashingVectorizer that will project each example into the same feature space.
This is especially useful in the case of text classification where new
features (words) may appear in each batch.

The dataset used in this example is Reuters-21578 as provided by the UCI ML
repository. It will be automatically downloaded and uncompressed on first run.

The plot represents the learning curve of the classifier: the evolution
of classification accuracy over the course of the mini-batches. Accuracy is
measured on the first 1000 samples, held out as a validation set.

To limit the memory consumption, we queue examples up to a fixed amount before
feeding them to the learner.



.. rst-class:: horizontal


    *

      .. image:: images/plot_out_of_core_classification_001.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_002.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_003.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_004.png
            :scale: 47


**Script output**::

  Test set is 994 documents (121 positive)
    Passive-Aggressive classifier :          985 train docs (   132 positive)    994 test docs (   121 positive) accuracy: 0.937 in 2.26s (  435 docs/s)
            Perceptron classifier :          985 train docs (   132 positive)    994 test docs (   121 positive) accuracy: 0.920 in 2.27s (  433 docs/s)
                   SGD classifier :          985 train docs (   132 positive)    994 test docs (   121 positive) accuracy: 0.922 in 2.28s (  432 docs/s)
        NB Multinomial classifier :          985 train docs (   132 positive)    994 test docs (   121 positive) accuracy: 0.880 in 2.34s (  421 docs/s)
  
  
    Passive-Aggressive classifier :         3887 train docs (   438 positive)    994 test docs (   121 positive) accuracy: 0.951 in 6.45s (  602 docs/s)
            Perceptron classifier :         3887 train docs (   438 positive)    994 test docs (   121 positive) accuracy: 0.946 in 6.46s (  601 docs/s)
                   SGD classifier :         3887 train docs (   438 positive)    994 test docs (   121 positive) accuracy: 0.961 in 6.47s (  600 docs/s)
        NB Multinomial classifier :         3887 train docs (   438 positive)    994 test docs (   121 positive) accuracy: 0.883 in 6.53s (  595 docs/s)
  
  
    Passive-Aggressive classifier :         6758 train docs (   797 positive)    994 test docs (   121 positive) accuracy: 0.962 in 10.69s (  631 docs/s)
            Perceptron classifier :         6758 train docs (   797 positive)    994 test docs (   121 positive) accuracy: 0.922 in 10.70s (  631 docs/s)
                   SGD classifier :         6758 train docs (   797 positive)    994 test docs (   121 positive) accuracy: 0.955 in 10.71s (  631 docs/s)
        NB Multinomial classifier :         6758 train docs (   797 positive)    994 test docs (   121 positive) accuracy: 0.896 in 10.76s (  627 docs/s)
  
  
    Passive-Aggressive classifier :         9162 train docs (  1142 positive)    994 test docs (   121 positive) accuracy: 0.968 in 14.67s (  624 docs/s)
            Perceptron classifier :         9162 train docs (  1142 positive)    994 test docs (   121 positive) accuracy: 0.953 in 14.68s (  624 docs/s)
                   SGD classifier :         9162 train docs (  1142 positive)    994 test docs (   121 positive) accuracy: 0.965 in 14.69s (  623 docs/s)
        NB Multinomial classifier :         9162 train docs (  1142 positive)    994 test docs (   121 positive) accuracy: 0.920 in 14.75s (  621 docs/s)
  
  
    Passive-Aggressive classifier :        12097 train docs (  1502 positive)    994 test docs (   121 positive) accuracy: 0.956 in 18.99s (  637 docs/s)
            Perceptron classifier :        12097 train docs (  1502 positive)    994 test docs (   121 positive) accuracy: 0.955 in 18.99s (  636 docs/s)
                   SGD classifier :        12097 train docs (  1502 positive)    994 test docs (   121 positive) accuracy: 0.969 in 19.00s (  636 docs/s)
        NB Multinomial classifier :        12097 train docs (  1502 positive)    994 test docs (   121 positive) accuracy: 0.923 in 19.06s (  634 docs/s)
  
  
    Passive-Aggressive classifier :        14918 train docs (  1834 positive)    994 test docs (   121 positive) accuracy: 0.972 in 23.16s (  644 docs/s)
            Perceptron classifier :        14918 train docs (  1834 positive)    994 test docs (   121 positive) accuracy: 0.962 in 23.16s (  644 docs/s)
                   SGD classifier :        14918 train docs (  1834 positive)    994 test docs (   121 positive) accuracy: 0.970 in 23.17s (  643 docs/s)
        NB Multinomial classifier :        14918 train docs (  1834 positive)    994 test docs (   121 positive) accuracy: 0.932 in 23.23s (  642 docs/s)
  
  
    Passive-Aggressive classifier :        17725 train docs (  2239 positive)    994 test docs (   121 positive) accuracy: 0.969 in 27.20s (  651 docs/s)
            Perceptron classifier :        17725 train docs (  2239 positive)    994 test docs (   121 positive) accuracy: 0.930 in 27.21s (  651 docs/s)
                   SGD classifier :        17725 train docs (  2239 positive)    994 test docs (   121 positive) accuracy: 0.971 in 27.22s (  651 docs/s)
        NB Multinomial classifier :        17725 train docs (  2239 positive)    994 test docs (   121 positive) accuracy: 0.934 in 27.27s (  649 docs/s)



**Python source code:** :download:`plot_out_of_core_classification.py <plot_out_of_core_classification.py>`

.. literalinclude:: plot_out_of_core_classification.py
    :lines: 25-

**Total running time of the example:**  29.84 seconds
( 0 minutes  29.84 seconds)
    